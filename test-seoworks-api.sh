#!/bin/bash\n\n# SEO Werks API Test Script\n# Tests the task completion endpoints\n\n# Configuration\nAPI_BASE_URL=\"http://localhost:3000/api/seoworks\"\nAPI_KEY=\"seoworks-secure-api-key-change-in-production\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\necho -e \"${BLUE}üß™ SEO Werks API Test Suite${NC}\"\necho \"================================\"\necho \"\"\n\n# Test 1: Health Check\necho -e \"${YELLOW}Test 1: Health Check${NC}\"\ncurl -s -H \"X-API-Key: $API_KEY\" \\\n  \"$API_BASE_URL/health\" | jq '.' || echo -e \"${RED}‚ùå Health check failed${NC}\"\necho \"\"\n\n# Test 2: Get Task Types\necho -e \"${YELLOW}Test 2: Get Task Types${NC}\"\ncurl -s -H \"X-API-Key: $API_KEY\" \\\n  \"$API_BASE_URL/tasks/types\" | jq '.taskTypes | keys' || echo -e \"${RED}‚ùå Task types failed${NC}\"\necho \"\"\n\n# Test 3: Get Task Status (will be empty but should work)\necho -e \"${YELLOW}Test 3: Get Task Status${NC}\"\ncurl -s -H \"X-API-Key: $API_KEY\" \\\n  \"$API_BASE_URL/tasks/status?limit=5\" | jq '.success' || echo -e \"${RED}‚ùå Task status failed${NC}\"\necho \"\"\n\n# Test 4: Try to complete a non-existent task (should fail gracefully)\necho -e \"${YELLOW}Test 4: Complete Non-existent Task (should fail gracefully)${NC}\"\nRESPONSE=$(curl -s -w \"%{http_code}\" -H \"X-API-Key: $API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"requestId\": \"123e4567-e89b-12d3-a456-426614174000\",\n    \"status\": \"completed\",\n    \"deliverables\": [\n      {\n        \"type\": \"blog_post\",\n        \"title\": \"Test Blog Post\",\n        \"description\": \"Test deliverable\"\n      }\n    ]\n  }' \\\n  \"$API_BASE_URL/tasks/complete\")\n\nHTTP_CODE=$(echo \"$RESPONSE\" | tail -c 4)\nRESPONSE_BODY=$(echo \"$RESPONSE\" | sed 's/...$//')\n\nif [ \"$HTTP_CODE\" = \"404\" ]; then\n  echo -e \"${GREEN}‚úÖ Correctly returned 404 for non-existent task${NC}\"\n  echo \"$RESPONSE_BODY\" | jq '.error' 2>/dev/null || echo \"$RESPONSE_BODY\"\nelse\n  echo -e \"${RED}‚ùå Expected 404, got $HTTP_CODE${NC}\"\n  echo \"$RESPONSE_BODY\"\nfi\necho \"\"\n\n# Test 5: Invalid API Key\necho -e \"${YELLOW}Test 5: Invalid API Key (should fail)${NC}\"\nRESPONSE=$(curl -s -w \"%{http_code}\" -H \"X-API-Key: invalid-key\" \\\n  \"$API_BASE_URL/health\")\n\nHTTP_CODE=$(echo \"$RESPONSE\" | tail -c 4)\nRESPONSE_BODY=$(echo \"$RESPONSE\" | sed 's/...$//')\n\nif [ \"$HTTP_CODE\" = \"401\" ]; then\n  echo -e \"${GREEN}‚úÖ Correctly rejected invalid API key${NC}\"\nelse\n  echo -e \"${RED}‚ùå Expected 401, got $HTTP_CODE${NC}\"\nfi\necho \"\"\n\n# Test 6: Invalid Status Transition\necho -e \"${YELLOW}Test 6: Invalid Request Data (should fail validation)${NC}\"\nRESPONSE=$(curl -s -w \"%{http_code}\" -H \"X-API-Key: $API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"requestId\": \"invalid-uuid\",\n    \"status\": \"invalid-status\"\n  }' \\\n  \"$API_BASE_URL/tasks/complete\")\n\nHTTP_CODE=$(echo \"$RESPONSE\" | tail -c 4)\nRESPONSE_BODY=$(echo \"$RESPONSE\" | sed 's/...$//')\n\nif [ \"$HTTP_CODE\" = \"400\" ]; then\n  echo -e \"${GREEN}‚úÖ Correctly rejected invalid data${NC}\"\n  echo \"$RESPONSE_BODY\" | jq '.error' 2>/dev/null || echo \"$RESPONSE_BODY\"\nelse\n  echo -e \"${RED}‚ùå Expected 400, got $HTTP_CODE${NC}\"\n  echo \"$RESPONSE_BODY\"\nfi\necho \"\"\n\necho -e \"${BLUE}üèÅ Test Suite Complete${NC}\"\necho \"\"\necho -e \"${YELLOW}üìù Notes:${NC}\"\necho \"- Health check should return 200 with operational status\"\necho \"- Task types should return the 5 supported types: blog, page, gbp, maintenance, seo\"\necho \"- Invalid requests should be rejected with appropriate error codes\"\necho \"- To test actual task completion, you'll need valid request IDs from the database\"\necho \"\"\necho -e \"${BLUE}üîß Next Steps:${NC}\"\necho \"1. Set up database with sample requests\"\necho \"2. Test actual task completion with real UUIDs\"\necho \"3. Verify dashboard updates reflect API changes\"\necho \"4. Set up monitoring and alerting for production use\"\necho \"\"\n\n# Example of how to create a test request in the database\necho -e \"${YELLOW}üí° To create test data:${NC}\"\necho \"Run this SQL in your database:\"\necho \"\"\necho \"INSERT INTO requests (id, type, status, title, description, client_id, tenant_id, requirements)\"\necho \"VALUES (\"\necho \"  '123e4567-e89b-12d3-a456-426614174000',\"\necho \"  'blog',\"\necho \"  'in_progress',\"\necho \"  'Winter Car Maintenance Blog Post',\"\necho \"  'Create SEO-optimized blog post about winter car care',\"\necho \"  'your-client-uuid',\"\necho \"  'your-tenant-uuid',\"\necho \"  '{\\\"keywords\\\": [\\\"winter car maintenance\\\"], \\\"wordCount\\\": 1200}'\");\"\necho \"\"\necho \"Then test completion with:\"\necho \"curl -X POST $API_BASE_URL/tasks/complete \\\\\"\necho \"  -H \\\"X-API-Key: $API_KEY\\\" \\\\\"\necho \"  -H \\\"Content-Type: application/json\\\" \\\\\"\necho \"  -d '{\\\"requestId\\\": \\\"123e4567-e89b-12d3-a456-426614174000\\\", \\\"status\\\": \\\"completed\\\"}'\"\n\necho -e \"\\n${GREEN}‚ú® Happy testing!${NC}\"