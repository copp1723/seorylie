version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: aiplatform
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for caching, session store, and messaging
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # cleanrylie backend
  cleanrylie-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: server
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: development
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/aiplatform
      REDIS_URL: redis://redis:6379
      PORT: 3000
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      JWT_SECRET: ${JWT_SECRET:-76fc7f19f08433ab29ecb559c592b3671515693659f3fc6d636a5a42fe8f0233}
      CORS_ORIGIN: http://localhost:5173
      WATCHDOG_API_URL: http://watchdog-api:8000
    ports:
      - "3000:3000"
    volumes:
      - ./:/app
      - /app/node_modules
    command: npm run dev

  # cleanrylie frontend
  cleanrylie-frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: client
    environment:
      VITE_API_URL: http://localhost:3000
      VITE_WS_URL: ws://localhost:3000
    ports:
      - "5173:5173"
    volumes:
      - ./:/app
      - /app/node_modules
    depends_on:
      - cleanrylie-api
    command: npm run dev

  # final_watchdog backend
  watchdog-api:
    build:
      context: /Users/copp1723/Desktop/main_watchdog/backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/aiplatform
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      PORT: 8000
      CORS_ORIGINS: http://localhost:5173,http://localhost:3000
    ports:
      - "8000:8000"
    volumes:
      - /Users/copp1723/Desktop/main_watchdog:/app
      - /app/.venv
      - /Users/copp1723/Desktop/main_watchdog/data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Optional: MindsDB for data federation (if needed)
  mindsdb:
    image: mindsdb/mindsdb:latest
    environment:
      PYTHONUNBUFFERED: 1
    ports:
      - "47334:47334"  # MindsDB API
      - "47335:47335"  # MindsDB SQL API
    volumes:
      - mindsdb_data:/root/mdb_storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:47334/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
  redis_data:
  mindsdb_data:

networks:
  default:
    name: ai-platform-network
