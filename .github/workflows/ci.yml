name: Cleanrylie CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  validate:
    name: Validate Code & Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check TypeScript
        run: npm run typecheck
        
      - name: Lint code
        run: npm run lint
        
      - name: Validate environment variables
        run: npm run check-env
        
      - name: Audit dependencies
        run: npm audit --production --audit-level=high

  validate-fixtures:
    name: Validate Test Fixtures
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Validate ADF fixtures
        run: npm run test:fixtures
        
      - name: Archive fixture validation report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: fixture-validation-report
          path: test-results/fixtures/validation-report.json
          retention-days: 14

  test-mocks:
    name: Test Mock Services
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Test mock services
        run: npm run test:mocks
        
      - name: Archive mock test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: mock-test-results
          path: test-results/jest
          retention-days: 14

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm run test:unit
        
      - name: Archive test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results
          path: test-results/jest
          retention-days: 14

  integration-tests:
    name: Integration Tests with Mocks
    runs-on: ubuntu-latest
    needs: [validate, test-mocks]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: aiplatform_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run integration tests with mocks
        run: npm run test:integration-mocks
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/aiplatform_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret
          USE_MOCKS: "true"
        
      - name: Archive test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: test-results/jest
          retention-days: 14

  adf-e2e-tests:
    name: ADF End-to-End Tests
    runs-on: ubuntu-latest
    needs: [validate, test-mocks, integration-tests]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: aiplatform_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ADF E2E tests with mocks
        run: npm run test:adf-mocks
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/aiplatform_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret
          USE_MOCKS: "true"
        
      - name: Archive test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: adf-e2e-test-results
          path: test-results/adf-e2e
          retention-days: 14

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, adf-e2e-tests]
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build server
        run: npm run build:server
        
      - name: Build client
        run: npm run build
        
      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            client/dist/
          retention-days: 7

  test-coverage:
    name: Test Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate coverage report
        run: npm run test:ci
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage/
          flags: unittests,integrationtests
          name: cleanrylie-coverage
          fail_ci_if_error: false
          verbose: true
        
      - name: Archive coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/
          retention-days: 14

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, test-coverage]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v3
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./dist
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install deployment dependencies
        run: npm ci --production
      
      - name: Deploy to staging
        run: echo "Deploy to staging environment"
        # Add actual deployment steps here
        env:
          STAGING_DEPLOY_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test-coverage]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v3
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./dist
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install deployment dependencies
        run: npm ci --production
      
      - name: Deploy to production
        run: echo "Deploy to production environment"
        # Add actual deployment steps here
        env:
          PRODUCTION_DEPLOY_KEY: ${{ secrets.PRODUCTION_DEPLOY_KEY }}
